version: 2.1
description: "AWS CodeDeploy"

# orbs:
#   aws-cli: circleci/aws-cli@volatile

commands:
  create-application:
    parameters:
      application_name:
        description:
          "The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account."
        type: string
    steps:
      - ensure-created: |
          aws deploy get-application --application-name << parameters.application_name >>
          if [ $? -ne 0 ]; then
            echo "No application named << parameters.application_name >> found. Trying to create a new one"
            aws deploy create-application --application-name << parameters.application_name >>
          else
            echo "Application named << parameters.application_name >> already exists. Skipping creation."
          fi
  create-deployment-group:
    parameters:
      application-name:
        description:
          "The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account."
        type: string
      deployment-group:
        description:
          "The name of a new deployment group for the specified application."
        type: string
      deployment-config:
        description:
          "Predefined deployment configuration name."
        type: string
        default: "CodeDeployDefault.OneAtATime"
    steps:
      - ensure-created: |
          aws deploy get-deployment-group \
            --application-name << parameters.application_name >> \
            --deployment-group-name << parameters.deployment-group >>
          if [ $? -ne 0 ]; then
            echo "No deployment group named << parameters.deployment-group >> found. Trying to create a new one"
            aws deploy create-deployment-group \
              --application-name << parameters.application_name >> \
              --deployment-group-name << parameters.deployment-group >> \
              --deployment-config-name << parameters.deployment-config >>
          else
            echo "Deployment group named << parameters.deployment-group >> already exists. Skipping creation."
          fi
  push-bundle:
    parameters:
      application-name:
        description:
          "The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account."
        type: string
      bundle-source:
        description:
          "The directory in your project to package up into an application revision."
        type: string
      bundle-bucket:
        description:
          "The s3 bucket where an application revision will be stored"
        type: string
      bundle-key:
        description:
          "A key under the s3 bucket where an application revision will be stored"
        type: string
      bundle-type:
        description:
          "The file type used for an application revision bundle. Currently defaults to 'zip'"
        type: string
        default: "zip"
    steps:
      - deploy: |
          aws deploy push \
            --application-name << parameters.application_name >> \
            --source << parameters.bundle-source >> \
            --s3-location s3://<< parameters.bundle-bucket >>/key=<< parameters.bundle-key >>.<< parameters.bundle-type >>

  deploy-bundle:
    parameters:
      application-name:
        description:
          "The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account."
        type: string
      deployment-group:
        description:
          "The name of a new deployment group for the specified application."
        type: string
      deployment-config:
        description:
          "Predefined deployment configuration name."
        type: string
        default: "CodeDeployDefault.OneAtATime"
      bundle-bucket:
        description:
          "The s3 bucket where an application revision will be stored"
        type: string
      bundle-key:
        description:
          "A key under the s3 bucket where an application revision will be stored"
        type: string
      bundle-type:
        description:
          "The file type used for an application revision bundle. Currently defaults to 'zip'"
        type: string
        default: "zip"
    steps:
      - deploy: |
          ID=$(aws deploy create-deployment \
                 --application-name << parameters.application_name >> \
                 --deployment-group-name << parameters.deployment-group >> \
                 --deployment-config-name << parameters.deployment-config >> \
                 --s3-location bucket=<< parameters.bundle-bucket >>,\
                               bundleType=<< parameters.bundle-type >>,\
                               key=<< parameters.bundle-key >>) \
                 --output text \
                 --query '[deploymentId]'
          if [ -z "$ID" ]; then
            echo "Something went wrong with the deployment."
          else
            STATUS=$(aws get-deployment \
                      --deployment-id $ID
                      --output text \
                      --query '[deploymentInfo.status]')
            while [[ "$STATUS" == "InProgress" || "$STATUS" == "Pending"]]; do
              STATUS=$(aws get-deployment \
                        --deployment-id $ID
                        --output text \
                        --query '[deploymentInfo.status]')
              sleep 5
            done
              echo "Deployment created."
              aws get-deployment -deployment-id $ID
          fi

jobs:
  deploy:
    description:
      "Ensures an application and deployment group exist then proceeds to
       bundle and upload an application revision to S3. Once uploaded this
       job will finally create a deployment based on that revision."
    parameters:
      region:
        description:
          "The AWS Region to deploy into"
        type: string
        default: $AWS_REGION
      application-name:
        description:
          "The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account."
        type: string
      deployment-group:
        description:
          "The name of a new deployment group for the specified application."
        type: string
      deployment-config:
        description:
          "Predefined deployment configuration name."
        type: string
        default: "CodeDeployDefault.OneAtATime"
      bundle-bucket:
        description:
          "The s3 bucket where an application revision will be stored"
        type: string
      bundle-key:
        description:
          "A key under the s3 bucket where an application revision will be stored"
        type: string
      bundle-type:
        description:
          "The file type used for an application revision bundle. Currently defaults to 'zip'"
        type: string
        default: "zip"
#    executor: aws-cli/default
    executor:
      machine: true # TODO: remove this and replace with aws-cli/default
    steps:
      # - aws-cli/install
      # - aws-cli/configure:
      #     aws_access_key_id: $AWS_ACCESS_KEY_ID
      #     aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
      #     region: << parameters.region >>
      - create-application:
          application-name: << parameters.application-name >>
      - create-deployment-group:
          application-name: << parameters.application-name >>
          deployment-group: << parameters.deployment-group >>
          deployment-config: << parameters.deployment-config >>
      - push-bundle:
          application-name: << parameters.application-name >>
          bundle-bucket: << parameters.bundle-bucket >>
          bundle-key: << parameters.bundle-key >>
          bundle-type: << parameters.bundle-type >>
      - deploy-bundle:
          application-name: << parameters.application-name >>
          deployment-group: << parameters.deployment-group >>
          deployment-config: << parameters.deployment-config >>
          bundle-bucket: << parameters.bundle-bucket >>
          bundle-key: << parameters.bundle-key >>
          bundle-type: << parameters.bundle-type >>
