version: 2.1
description: "AWS CodeDeploy"

orbs:
  aws-cli: circleci/aws-cli@dev:snapshot

commands:
  create-application:
    parameters:
      application-name:
        description:
          "The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account."
        type: string
    steps:
      - run:
          name: ensure-application-created
          command: |
            set +e
            aws deploy get-application --application-name << parameters.application-name >>
            if [ $? -ne 0 ]; then
              set -e
              echo "No application named << parameters.application-name >> found. Trying to create a new one"
              aws deploy create-application --application-name << parameters.application-name >>
            else
              set -e
              echo "Application named << parameters.application-name >> already exists. Skipping creation."
            fi
  create-deployment-group:
    parameters:
      application-name:
        description:
          "The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account."
        type: string
      deployment-group:
        description:
          "The name of a new deployment group for the specified application."
        type: string
      deployment-config:
        description:
          "Predefined deployment configuration name."
        type: string
        default: "CodeDeployDefault.OneAtATime"
      service-role-arn:
        description:
          "The service role for a deployment group."
        type: string
    steps:
      - run:
          name: ensure-deployment-created
          command: |
            set +e
            aws deploy get-deployment-group \
              --application-name << parameters.application-name >> \
              --deployment-group-name << parameters.deployment-group >>
            if [ $? -ne 0 ]; then
              set -e
              echo "No deployment group named << parameters.deployment-group >> found. Trying to create a new one"
              aws deploy create-deployment-group \
                --application-name << parameters.application-name >> \
                --deployment-group-name << parameters.deployment-group >> \
                --deployment-config-name << parameters.deployment-config >> \
                --service-role-arn << parameters.service-role-arn >>
            else
              set -e
              echo "Deployment group named << parameters.deployment-group >> already exists. Skipping creation."
            fi
  push-bundle:
    parameters:
      application-name:
        description:
          "The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account."
        type: string
      bundle-source:
        description:
          "The directory relative to your project to package up into an application revision."
        type: string
        default: "."
      bundle-bucket:
        description:
          "The s3 bucket where an application revision will be stored"
        type: string
      bundle-key:
        description:
          "A key under the s3 bucket where an application revision will be stored"
        type: string
      bundle-type:
        description:
          "The file type used for an application revision bundle. Currently defaults to 'zip'"
        type: string
        default: "zip"
    steps:
      - run:
          name: push-bundle
          command: |
            aws deploy push \
              --application-name << parameters.application-name >> \
              --source ./project/<< parameters.bundle-source >> \
              --s3-location s3://<< parameters.bundle-bucket >>/<< parameters.bundle-key >>.<< parameters.bundle-type >>

  deploy-bundle:
    parameters:
      application-name:
        description:
          "The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account."
        type: string
      deployment-group:
        description:
          "The name of a new deployment group for the specified application."
        type: string
      deployment-config:
        description:
          "Predefined deployment configuration name."
        type: string
        default: "CodeDeployDefault.OneAtATime"
      bundle-bucket:
        description:
          "The s3 bucket where an application revision will be stored"
        type: string
      bundle-key:
        description:
          "A key under the s3 bucket where an application revision will be stored"
        type: string
      bundle-type:
        description:
          "The file type used for an application revision bundle. Currently defaults to 'zip'"
        type: string
        default: "zip"
    steps:
      - run:
          name: deploy-bundle
          command: |
            ID=$(aws deploy create-deployment \
                   --application-name << parameters.application-name >> \
                   --deployment-group-name << parameters.deployment-group >> \
                   --deployment-config-name << parameters.deployment-config >> \
                   --s3-location bucket=<< parameters.bundle-bucket >>,\
                                 bundleType=<< parameters.bundle-type >>,\
                                 key=<< parameters.bundle-key >>) \
                   --output text \
                   --query '[deploymentId]'
            if [ -z "$ID" ]; then
              echo "Something went wrong with the deployment."
            else
              STATUS=$(aws get-deployment \
                        --deployment-id $ID
                        --output text \
                        --query '[deploymentInfo.status]')
              while [[ "$STATUS" == "InProgress" || "$STATUS" == "Pending"]]; do
                STATUS=$(aws get-deployment \
                          --deployment-id $ID
                          --output text \
                          --query '[deploymentInfo.status]')
                sleep 5
              done
                echo "Deployment created."
                aws get-deployment -deployment-id $ID
            fi

jobs:
  deploy:
    description:
      "Ensures an application and deployment group exist then proceeds to
       bundle and upload an application revision to S3. Once uploaded this
       job will finally create a deployment based on that revision."
    parameters:
      region:
        description:
          "The AWS Region to deploy into"
        type: string
        default: $AWS_REGION
      application-name:
        description:
          "The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account."
        type: string
      deployment-group:
        description:
          "The name of a new deployment group for the specified application."
        type: string
      deployment-config:
        description:
          "Predefined deployment configuration name."
        type: string
        default: "CodeDeployDefault.OneAtATime"
      service-role-arn:
        description:
          "The service role for a deployment group."
        type: string
      bundle-source:
        description:
          "The directory relative to your project to package up into an application revision."
        type: string
        default: "."
      bundle-bucket:
        description:
          "The s3 bucket where an application revision will be stored"
        type: string
      bundle-key:
        description:
          "A key under the s3 bucket where an application revision will be stored"
        type: string
      bundle-type:
        description:
          "The file type used for an application revision bundle. Currently defaults to 'zip'"
        type: string
        default: "zip"
    executor: aws-cli/default
    steps:
      - aws-cli/install
      - aws-cli/configure:
          aws-access-key-id: $AWS_ACCESS_KEY_ID
          aws-secret-access-key: $AWS_SECRET_ACCESS_KEY
          region: << parameters.region >>
      - create-application:
          application-name: << parameters.application-name >>
      - create-deployment-group:
          application-name: << parameters.application-name >>
          deployment-group: << parameters.deployment-group >>
          deployment-config: << parameters.deployment-config >>
          service-role-arn: << parameters.service-role-arn >>
      - push-bundle:
          application-name: << parameters.application-name >>
          bundle-source: << parameters.bundle-source >>
          bundle-bucket: << parameters.bundle-bucket >>
          bundle-key: << parameters.bundle-key >>
          bundle-type: << parameters.bundle-type >>
      - deploy-bundle:
          application-name: << parameters.application-name >>
          deployment-group: << parameters.deployment-group >>
          deployment-config: << parameters.deployment-config >>
          bundle-bucket: << parameters.bundle-bucket >>
          bundle-key: << parameters.bundle-key >>
          bundle-type: << parameters.bundle-type >>
