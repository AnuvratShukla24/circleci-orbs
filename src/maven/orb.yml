version: 2.1

description: |
  Simplify common tasks for building and testing Maven projects

examples:
  standard_maven_project:
    description: |
      If you have a standard maven project, you can use this orb to run through
      a common maven worklow. Without any additional configuration you can
      build, test, and automatically have your test results uploaded to CircleCI.
    usage:
      version: 2.1

      orbs:
        maven: circleci/maven@1.0.0

      workflows:
        maven_test:
          jobs:
            - maven/test

  custom_command:
    description: |
      You could run any custom maven command that you wish. In the example
      below we are running maven verify with debug mode enabled.

    usage:
      version: 2.1

      orbs:
        maven: circleci/maven@1.0.0

      workflows:
        maven_test:
          jobs:
            - maven/test:
                command: -X verify

  custom_test_results_path:
    description: |
      If your tests results are not in the default (target/surefire-reports)
      directory then you could add a custom directory.

    usage:
      version: 2.1

      orbs:
        maven: circleci/maven@1.0.0

      workflows:
        maven_test:
          jobs:
            - maven/test:
                test_results_path: /path/to/test/results

  custom_executor:
    description: |
      If you want to override the executor used by default.

    usage:
      version: 2.1

      orbs:
        maven: circleci/maven@1.0.0

      executors:
        my-executor:
          docker:
            - image: circleci/openjdk@9

      workflows:
        maven_test:
          jobs:
            - maven/test:
                executor: my-executor

executors:
  maven:
    description: The docker container to use when running Maven builds
    docker:
      - image: circleci/openjdk:8-jdk-node

commands:
  with_cache:
    description: |
      Run a set of steps with Maven dependencies cached.

      This command will first restore a cache of maven dependencies, if one was
      saved by a previous build. The provided `steps` will then be executed, and
      if successful, then a fresh cache will be saved, if required.

      The contents of the `~/.m2` directory is cached, which will substantially
      improve build times for projects with many dependencies.

      The cache-key is generated from any files named `pom.xml` that are
      present in the `working_directory`.
    parameters:
      steps:
        type: steps
    steps:
      - run:
          name: Generate Cache Checksum
          command: find . -name 'pom.xml' -exec cat {} + | shasum | awk '{print $1}' > /tmp/maven_cache_seed
      - restore_cache:
          key: maven-{{ checksum "/tmp/maven_cache_seed" }}
      - run:
          name: Install Dependencies
          command: mvn dependency:go-offline
      - steps: << parameters.steps >>
      - save_cache:
          paths:
            - ~/.m2
          key: maven-{{ checksum "/tmp/maven_cache_seed" }}
  process_test_results:
    description: |
      Upload test results.

      This will populate the Test Summary tab in the CircleCI UI. By default it will
      look in `target/surefire-reports` (the default location for maven test results).
      You can override where to find the test results with the path parameter.
    parameters:
      test_results_path:
        type: string
    steps:
      - store_test_results:
          path: << parameters.test_results_path >>

jobs:
  test:
    description: |
      Checkout, build, test, and upload test results for a Maven project.
    executor: <<parameters.executor>>
    parallelism: <<parameters.parallelism>>
    parameters:
      executor:
        description: The name of custom executor to use
        type: executor
        default: maven
      command:
        description: The maven command to run.
        type: string
        default: verify
      test_results_path:
        description: The path to the test results.
        type: string
        default: target/surefire-reports
      parallelism:
        description: If you wish to run tests in parallel, set a higher value.
        type: integer
        default: 1
      parallel:
        description: If you wish to run tests in parallel, must be true to split tests
        type: boolean
        default: false
      parallel_test_pattern:
        description: If you wish to run tests in parallel, what ant-glob style path matches the tests to be split? Defaults to all classes in src/test/java ending in 'Tests'
        type: string
        default: "src/test/java/**/*Tests.java"
    steps:
      - checkout
      # we can only evalute truthiness of parameters, not value, so we need to use bash logic, or force 2 parameters.
      - when:
          condition: << parameters.parallel >>
          steps:
            - run:
                name: Enable Test Splitting
                command: |
                  class_argument=$( echo -n $(circleci tests glob <<parameters.parallel_test_pattern>> |  sed -e 's#^src/test/java/\(.*\)\.java#\1#' | tr "/" "."  | circleci tests split --split-by=timings --timings-type=classname) | tr ' ' ',')
                  echo "export SPLIT_TESTS=$class_argument" >> $BASH_ENV
      - with_cache:
          steps:
            - run:
                name: Run Tests
                command: mvn << parameters.command >> <<# parameters.parallel >> -Dtest=$SPLIT_TESTS <</ parameters.parallel >>
      - process_test_results:
          test_results_path: << parameters.test_results_path >>
